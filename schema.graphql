"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean = true

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type ActionRecord {
  action_id: String!
  amount: Int64!
  asset: String!
  block_height: Uint64!
  id: String!
  memo: String!
  params: Map
  status: String!
  timestamp: String!
  to: String!
  type: String!
}

enum Asset {
  hbd
  hbd_savings
  hive
  hive_consensus
}

type BalanceRecord {
  account: String
  block_height: Uint64!
  consensus_unstaking: Int64!
  hbd: Int64!
  hbd_avg: Int64!
  hbd_claim: Uint64!
  hbd_modify: Uint64!
  hbd_savings: Int64!
  hive: Int64!
  hive_consensus: Int64!
  pending_hbd_unstaking: Int64
}

type Contract {
  code: String
  creation_height: Uint64!
  creation_ts: String!
  creator: String
  description: String
  id: String!
  name: String
  owner: String
  runtime: String!
  tx_id: String
}

type ContractDiff {
  diff: JSON
  previousContractStateId: String!
}

type ContractOutput {
  block_height: Int64!
  contract_id: String!
  id: String!
  inputs: [String!]!
  results: [ContractOutputResult!]!
  state_merkle: String!
  timestamp: String!
}

input ContractOutputFilter {
  byContract: String
  byId: String
  byInput: String
  limit: Int
  offset: Int
}

type ContractOutputResult {
  ok: Boolean!
  ret: String!
}

type ContractState {
  id: String
  state(key: String): JSON
  stateKeys(key: String): JSON
  stateQuery(key: String, query: JSON): JSON
  state_merkle: String
}

scalar DateTime

type ElectionMember {
  account: String!
  key: String!
}

type ElectionResult {
  block_height: Uint64!
  data: String!
  epoch: Uint64!
  members: [ElectionMember!]!
  net_id: String!
  proposer: String!
  protocol_version: Uint64!
  total_weight: Uint64!
  tx_id: String!
  type: String!
  weights: [Uint64!]!
}

input FindContractFilter {
  byCode: String
  byId: String
  limit: Int
  offset: Int
}

type Gas {
  IO: Int
}

scalar Int64

scalar JSON

type LedgerAction {
  amount: Uint64
  asset: String
  data: Map
  id: String
  memo: String
  status: String
  to: String
  type: String
}

input LedgerActionsFilter {
  byAccount: String
  byActionId: String
  byAsset: Asset
  byStatus: String
  byTxId: String
  byTypes: [String!]
  fromBlock: Uint64
  limit: Int
  offset: Int
  toBlock: Uint64
}

type LedgerRecord {
  amount: Int64!
  asset: String!
  block_height: Uint64!
  from: String!
  id: String!
  owner: String!
  timestamp: String!
  tx_id: String!
  type: String!
}

input LedgerTxFilter {
  byAsset: Asset
  byToFrom: String
  byTxId: String
  byTypes: [String!]
  fromBlock: Uint64
  limit: Int
  offset: Int
  toBlock: Uint64
}

type LocalNodeInfo {
  epoch: Uint64!
  git_commit: String!
  last_processed_block: Uint64!
  version_id: String!
}

scalar Map

type NonceRecord {
  account: String!
  nonce: Uint64!
}

type OpLogEvent {
  amount: Int64!
  asset: String!
  from: String!
  memo: String
  params: Map
  to: String!
  type: String!
}

type PostingJsonKeys {
  ct: String
  key: String
  t: String
}

type Query {
  contractState(id: String): ContractState
  contractStateDiff(id: String): ContractDiff
  electionByBlockHeight(blockHeight: Uint64): ElectionResult!
  findContract(filterOptions: FindContractFilter): [Contract!]
  findContractOutput(filterOptions: ContractOutputFilter): [ContractOutput!]
  findLedgerActions(filterOptions: LedgerActionsFilter): [ActionRecord!]
  findLedgerTXs(filterOptions: LedgerTxFilter): [LedgerRecord!]
  findTransaction(filterOptions: TransactionFilter): [TransactionRecord!]
  getAccountBalance(account: String!, height: Uint64): BalanceRecord
  getAccountNonce(account: String!): NonceRecord
  getAccountRC(account: String!, height: Uint64): RcRecord
  getDagByCID(cidString: String!): JSON!
  getElection(epoch: Uint64!): ElectionResult
  getWitness(account: String!, height: Uint64): Witness
  localNodeInfo: LocalNodeInfo
  submitTransactionV1(sig: String!, tx: String!): TransactionSubmitResult
  witnessNodes(height: Uint64!): [Witness!]!
  witnessSchedule(height: Uint64!): [WitnessSlot!]!
  witnessStake(account: String!): Uint64!
}

type RcRecord {
  account: String!
  amount: Int64!
  block_height: Uint64!
  max_rcs: Int64!
}

input TransactionFilter {
  byAccount: String
  byContract: String
  byId: String
  byIds: [String!]
  byLedgerToFrom: String
  byLedgerTypes: [String!]
  byStatus: TransactionStatus
  byType: [String!]
  limit: Int
  offset: Int
}

type TransactionOperation {
  data: Map
  index: Uint64!
  required_auths: [String!]
  type: String
}

type TransactionOutput {
  id: String!
  index: Int64!
}

type TransactionRecord {
  anchr_height: Uint64!
  anchr_index: Uint64!
  anchr_ts: String
  first_seen: DateTime!
  id: String!
  ledger: [OpLogEvent!]
  ledger_actions: [LedgerAction]
  nonce: Uint64!
  op_types: [String!]
  ops: [TransactionOperation]
  output: TransactionOutput
  rc_limit: Uint64!
  required_auths: [String!]
  required_posting_auths: [String!]
  status: String!
  type: String!
}

enum TransactionStatus {
  CONFIRMED
  FAILED
  INCLUDED
  PROCESSED
  UNCONFIRMED
}

type TransactionSubmitResult {
  id: String
}

scalar Uint64

type Witness {
  account: String
  did_keys: [PostingJsonKeys!]!
  enabled: Boolean
  gateway_key: String
  git_commit: String
  height: Uint64!
  net_id: String
  peer_id: String
  protocol_version: Uint64!
  ts: String
  tx_id: String
  version_id: String
}

type WitnessSlot {
  account: String
  bn: Uint64!
}
